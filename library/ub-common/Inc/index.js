"use strict";var F=Object.defineProperty;var m=Object.getOwnPropertySymbols;var T=Object.prototype.hasOwnProperty,q=Object.prototype.propertyIsEnumerable;var f=(e,t,n)=>t in e?F(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))T.call(t,n)&&f(e,n,t[n]);if(m)for(var n of m(t))q.call(t,n)&&f(e,n,t[n]);return e};var D=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var p=(e,t,n)=>(D(e,t,"read from private field"),n?n.call(e):t.get(e)),h=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},g=(e,t,n,r)=>(D(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const S=require("../.Chunks/e2c2858e.js"),k=require("@wordpress/data"),x=require("@wordpress/compose"),d=require("react/jsx-runtime");require("react");const w=require("@wordpress/hooks"),P=require("@wordpress/i18n"),W=require("@wordpress/blocks"),_=require("@wordpress/block-editor"),b=e=>({namespacedWithDispatch:r=>k.withDispatch((i,s,{select:a})=>{const o=i(e),M=a(e);return r(o,M)}),namespacedWithSelect:r=>k.withSelect((i,s,a)=>{const o=i(e);return r(o,s,a)})}),H=(e,t,n)=>{const{namespacedWithDispatch:r,namespacedWithSelect:i}=b(e);let s=o=>o;t&&(s=i(t));let a=o=>o;return n&&(a=r(n)),x.compose(s,a)};var c;class v{constructor(){h(this,c,!1)}isInitialized(){return p(this,c)}_initLogic(){throw new Error("initLogic function is not implemented at extended class")}init(){this.isInitialized()||(this._initLogic.call(this,...arguments),g(this,c,!0))}}c=new WeakMap;var l;class L extends v{constructor(){super(...arguments);h(this,l,null)}_initLogic(n){const r=self||global;g(this,l,r[n]||{}),r[n]=void 0}getDataProperty(n,r=null){return p(this,l)[n]||r}}l=new WeakMap;const z=new L,y={filters:{ADD_SUB_COMPONENT:"subComponentAdd"}};function B(){const e="ub",t={FILTER:"filter",ACTION:"action"};this.hookTypes=y;const n=(r,i)=>`${e}.${i}.${r}`;this.applyFilters=(r,i)=>w.applyFilters(n(r,t.FILTER),i),this.addFilter=(r,i,s)=>{w.addFilter(n(r,t.FILTER),i,s)}}const I=new B,E=e=>t=>d.jsx(e,u(u({},t),I));function N({clientId:e}){function t(){return`ub-preview-provider_${e}`}return d.jsx("div",{className:"ub-preview-provider",id:t(),children:d.jsx(_.InnerBlocks,{})})}const j=()=>{W.registerBlockType("ub/preview-provider",{title:P.__("only for UB internal use","ultimate-blocks"),attributes:{},category:"ultimateblocks",supports:{inserter:!1,reusable:!1},edit:e=>d.jsx(N,u({},e)),save:()=>null})};exports.Debouncer=S.Debouncer;exports.IconSizeDefinition=S.IconSizeDefinition;exports.FrontendDataManager=z;exports.HookManager=I;exports.ManagerBase=v;exports.connectWithStore=H;exports.createNamespacedHelpers=b;exports.hookTypes=y;exports.registerPreviewManager=j;exports.withHookManager=E;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
