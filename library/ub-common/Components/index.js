"use strict";var tt=Object.defineProperty;var Ce=Object.getOwnPropertySymbols;var rt=Object.prototype.hasOwnProperty,nt=Object.prototype.propertyIsEnumerable;var Re=(e,t,r)=>t in e?tt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ye=(e,t)=>{for(var r in t||(t={}))rt.call(t,r)&&Re(e,r,t[r]);if(Ce)for(var r of Ce(t))nt.call(t,r)&&Re(e,r,t[r]);return e};var ee=(e,t,r)=>new Promise((n,s)=>{var a=d=>{try{i(r.next(d))}catch(p){s(p)}},l=d=>{try{i(r.throw(d))}catch(p){s(p)}},i=d=>d.done?n(d.value):Promise.resolve(d.value).then(a,l);i((r=r.apply(e,t)).next())});Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const h=require("react/jsx-runtime"),w=require("react"),pe=require("@wordpress/components"),ae=require("@wordpress/i18n"),le=require("@fortawesome/fontawesome-svg-core"),ue=require("../.Chunks/e2c2858e.js"),Ye=require("@fortawesome/free-solid-svg-icons"),Be=require("@fortawesome/free-brands-svg-icons"),ot=require("@wordpress/block-editor"),at=require("react-dom");let ce;const it=new Uint8Array(16);function st(){if(!ce&&(ce=typeof crypto!="undefined"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!ce))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ce(it)}const W=[];for(let e=0;e<256;++e)W.push((e+256).toString(16).slice(1));function ct(e,t=0){return(W[e[t+0]]+W[e[t+1]]+W[e[t+2]]+W[e[t+3]]+"-"+W[e[t+4]]+W[e[t+5]]+"-"+W[e[t+6]]+W[e[t+7]]+"-"+W[e[t+8]]+W[e[t+9]]+"-"+W[e[t+10]]+W[e[t+11]]+W[e[t+12]]+W[e[t+13]]+W[e[t+14]]+W[e[t+15]]).toLowerCase()}const ut=typeof crypto!="undefined"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),je={randomUUID:ut};function xe(e,t,r){if(je.randomUUID&&!t&&!e)return je.randomUUID();e=e||{};const n=e.random||(e.rng||st)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,t){r=r||0;for(let s=0;s<16;++s)t[r+s]=n[s];return t}return ct(n)}function lt({onChange:e,value:t}){return h.jsx("div",{className:"ultimate-blocks-icon-search-wrapper",children:h.jsx("input",{className:"ultimate-blocks-icon-search-input",type:"text",value:t,placeholder:ae.__("Searchâ€¦","ub-common"),onInput:({target:r})=>e(r.value)})})}function Pe(e,t){const{iconName:r}=t;this.getAttributes=()=>t,this.getName=()=>r}var v={},Ae={get exports(){return v},set exports(e){v=e}},fe={},ft={get exports(){return fe},set exports(e){fe=e}},R={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ke;function dt(){if(ke)return R;ke=1;var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,a=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,d=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,b=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,_=e?Symbol.for("react.memo"):60115,L=e?Symbol.for("react.lazy"):60116,C=e?Symbol.for("react.block"):60121,O=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,B=e?Symbol.for("react.scope"):60119;function M(c){if(typeof c=="object"&&c!==null){var H=c.$$typeof;switch(H){case t:switch(c=c.type,c){case d:case p:case n:case a:case s:case b:return c;default:switch(c=c&&c.$$typeof,c){case i:case y:case L:case _:case l:return c;default:return H}}case r:return H}}}function q(c){return M(c)===p}return R.AsyncMode=d,R.ConcurrentMode=p,R.ContextConsumer=i,R.ContextProvider=l,R.Element=t,R.ForwardRef=y,R.Fragment=n,R.Lazy=L,R.Memo=_,R.Portal=r,R.Profiler=a,R.StrictMode=s,R.Suspense=b,R.isAsyncMode=function(c){return q(c)||M(c)===d},R.isConcurrentMode=q,R.isContextConsumer=function(c){return M(c)===i},R.isContextProvider=function(c){return M(c)===l},R.isElement=function(c){return typeof c=="object"&&c!==null&&c.$$typeof===t},R.isForwardRef=function(c){return M(c)===y},R.isFragment=function(c){return M(c)===n},R.isLazy=function(c){return M(c)===L},R.isMemo=function(c){return M(c)===_},R.isPortal=function(c){return M(c)===r},R.isProfiler=function(c){return M(c)===a},R.isStrictMode=function(c){return M(c)===s},R.isSuspense=function(c){return M(c)===b},R.isValidElementType=function(c){return typeof c=="string"||typeof c=="function"||c===n||c===p||c===a||c===s||c===b||c===k||typeof c=="object"&&c!==null&&(c.$$typeof===L||c.$$typeof===_||c.$$typeof===l||c.$$typeof===i||c.$$typeof===y||c.$$typeof===O||c.$$typeof===N||c.$$typeof===B||c.$$typeof===C)},R.typeOf=M,R}var j={};/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ne;function pt(){return Ne||(Ne=1,process.env.NODE_ENV!=="production"&&function(){var e=typeof Symbol=="function"&&Symbol.for,t=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,n=e?Symbol.for("react.fragment"):60107,s=e?Symbol.for("react.strict_mode"):60108,a=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,i=e?Symbol.for("react.context"):60110,d=e?Symbol.for("react.async_mode"):60111,p=e?Symbol.for("react.concurrent_mode"):60111,y=e?Symbol.for("react.forward_ref"):60112,b=e?Symbol.for("react.suspense"):60113,k=e?Symbol.for("react.suspense_list"):60120,_=e?Symbol.for("react.memo"):60115,L=e?Symbol.for("react.lazy"):60116,C=e?Symbol.for("react.block"):60121,O=e?Symbol.for("react.fundamental"):60117,N=e?Symbol.for("react.responder"):60118,B=e?Symbol.for("react.scope"):60119;function M(u){return typeof u=="string"||typeof u=="function"||u===n||u===p||u===a||u===s||u===b||u===k||typeof u=="object"&&u!==null&&(u.$$typeof===L||u.$$typeof===_||u.$$typeof===l||u.$$typeof===i||u.$$typeof===y||u.$$typeof===O||u.$$typeof===N||u.$$typeof===B||u.$$typeof===C)}function q(u){if(typeof u=="object"&&u!==null){var G=u.$$typeof;switch(G){case t:var se=u.type;switch(se){case d:case p:case n:case a:case s:case b:return se;default:var _e=se&&se.$$typeof;switch(_e){case i:case y:case L:case _:case l:return _e;default:return G}}case r:return G}}}var c=d,H=p,oe=i,te=l,$=t,z=y,F=n,U=L,K=_,V=r,X=a,D=s,J=b,Z=!1;function ie(u){return Z||(Z=!0,console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),o(u)||q(u)===d}function o(u){return q(u)===p}function f(u){return q(u)===i}function x(u){return q(u)===l}function S(u){return typeof u=="object"&&u!==null&&u.$$typeof===t}function m(u){return q(u)===y}function T(u){return q(u)===n}function g(u){return q(u)===L}function I(u){return q(u)===_}function E(u){return q(u)===r}function A(u){return q(u)===a}function P(u){return q(u)===s}function Y(u){return q(u)===b}j.AsyncMode=c,j.ConcurrentMode=H,j.ContextConsumer=oe,j.ContextProvider=te,j.Element=$,j.ForwardRef=z,j.Fragment=F,j.Lazy=U,j.Memo=K,j.Portal=V,j.Profiler=X,j.StrictMode=D,j.Suspense=J,j.isAsyncMode=ie,j.isConcurrentMode=o,j.isContextConsumer=f,j.isContextProvider=x,j.isElement=S,j.isForwardRef=m,j.isFragment=T,j.isLazy=g,j.isMemo=I,j.isPortal=E,j.isProfiler=A,j.isStrictMode=P,j.isSuspense=Y,j.isValidElementType=M,j.typeOf=q}()),j}var qe;function Ve(){return qe||(qe=1,function(e){process.env.NODE_ENV==="production"?e.exports=dt():e.exports=pt()}(ft)),fe}/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var me,Me;function yt(){if(Me)return me;Me=1;var e=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function n(a){if(a==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(a)}function s(){try{if(!Object.assign)return!1;var a=new String("abc");if(a[5]="de",Object.getOwnPropertyNames(a)[0]==="5")return!1;for(var l={},i=0;i<10;i++)l["_"+String.fromCharCode(i)]=i;var d=Object.getOwnPropertyNames(l).map(function(y){return l[y]});if(d.join("")!=="0123456789")return!1;var p={};return"abcdefghijklmnopqrst".split("").forEach(function(y){p[y]=y}),Object.keys(Object.assign({},p)).join("")==="abcdefghijklmnopqrst"}catch(y){return!1}}return me=s()?Object.assign:function(a,l){for(var i,d=n(a),p,y=1;y<arguments.length;y++){i=Object(arguments[y]);for(var b in i)t.call(i,b)&&(d[b]=i[b]);if(e){p=e(i);for(var k=0;k<p.length;k++)r.call(i,p[k])&&(d[p[k]]=i[p[k]])}}return d},me}var ve,Le;function we(){if(Le)return ve;Le=1;var e="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";return ve=e,ve}var be,$e;function He(){return $e||($e=1,be=Function.call.bind(Object.prototype.hasOwnProperty)),be}var he,De;function mt(){if(De)return he;De=1;var e=function(){};if(process.env.NODE_ENV!=="production"){var t=we(),r={},n=He();e=function(a){var l="Warning: "+a;typeof console!="undefined"&&console.error(l);try{throw new Error(l)}catch(i){}}}function s(a,l,i,d,p){if(process.env.NODE_ENV!=="production"){for(var y in a)if(n(a,y)){var b;try{if(typeof a[y]!="function"){var k=Error((d||"React class")+": "+i+" type `"+y+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof a[y]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw k.name="Invariant Violation",k}b=a[y](l,y,d,i,null,t)}catch(L){b=L}if(b&&!(b instanceof Error)&&e((d||"React class")+": type specification of "+i+" `"+y+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof b+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),b instanceof Error&&!(b.message in r)){r[b.message]=!0;var _=p?p():"";e("Failed "+i+" type: "+b.message+(_!=null?_:""))}}}}return s.resetWarningCache=function(){process.env.NODE_ENV!=="production"&&(r={})},he=s,he}var ge,Fe;function vt(){if(Fe)return ge;Fe=1;var e=Ve(),t=yt(),r=we(),n=He(),s=mt(),a=function(){};process.env.NODE_ENV!=="production"&&(a=function(i){var d="Warning: "+i;typeof console!="undefined"&&console.error(d);try{throw new Error(d)}catch(p){}});function l(){return null}return ge=function(i,d){var p=typeof Symbol=="function"&&Symbol.iterator,y="@@iterator";function b(o){var f=o&&(p&&o[p]||o[y]);if(typeof f=="function")return f}var k="<<anonymous>>",_={array:N("array"),bigint:N("bigint"),bool:N("boolean"),func:N("function"),number:N("number"),object:N("object"),string:N("string"),symbol:N("symbol"),any:B(),arrayOf:M,element:q(),elementType:c(),instanceOf:H,node:z(),objectOf:te,oneOf:oe,oneOfType:$,shape:U,exact:K};function L(o,f){return o===f?o!==0||1/o===1/f:o!==o&&f!==f}function C(o,f){this.message=o,this.data=f&&typeof f=="object"?f:{},this.stack=""}C.prototype=Error.prototype;function O(o){if(process.env.NODE_ENV!=="production")var f={},x=0;function S(T,g,I,E,A,P,Y){if(E=E||k,P=P||I,Y!==r){if(d){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}else if(process.env.NODE_ENV!=="production"&&typeof console!="undefined"){var G=E+":"+I;!f[G]&&x<3&&(a("You are manually calling a React.PropTypes validation function for the `"+P+"` prop on `"+E+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),f[G]=!0,x++)}}return g[I]==null?T?g[I]===null?new C("The "+A+" `"+P+"` is marked as required "+("in `"+E+"`, but its value is `null`.")):new C("The "+A+" `"+P+"` is marked as required in "+("`"+E+"`, but its value is `undefined`.")):null:o(g,I,E,A,P)}var m=S.bind(null,!1);return m.isRequired=S.bind(null,!0),m}function N(o){function f(x,S,m,T,g,I){var E=x[S],A=D(E);if(A!==o){var P=J(E);return new C("Invalid "+T+" `"+g+"` of type "+("`"+P+"` supplied to `"+m+"`, expected ")+("`"+o+"`."),{expectedType:o})}return null}return O(f)}function B(){return O(l)}function M(o){function f(x,S,m,T,g){if(typeof o!="function")return new C("Property `"+g+"` of component `"+m+"` has invalid PropType notation inside arrayOf.");var I=x[S];if(!Array.isArray(I)){var E=D(I);return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+m+"`, expected an array."))}for(var A=0;A<I.length;A++){var P=o(I,A,m,T,g+"["+A+"]",r);if(P instanceof Error)return P}return null}return O(f)}function q(){function o(f,x,S,m,T){var g=f[x];if(!i(g)){var I=D(g);return new C("Invalid "+m+" `"+T+"` of type "+("`"+I+"` supplied to `"+S+"`, expected a single ReactElement."))}return null}return O(o)}function c(){function o(f,x,S,m,T){var g=f[x];if(!e.isValidElementType(g)){var I=D(g);return new C("Invalid "+m+" `"+T+"` of type "+("`"+I+"` supplied to `"+S+"`, expected a single ReactElement type."))}return null}return O(o)}function H(o){function f(x,S,m,T,g){if(!(x[S]instanceof o)){var I=o.name||k,E=ie(x[S]);return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+m+"`, expected ")+("instance of `"+I+"`."))}return null}return O(f)}function oe(o){if(!Array.isArray(o))return process.env.NODE_ENV!=="production"&&(arguments.length>1?a("Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."):a("Invalid argument supplied to oneOf, expected an array.")),l;function f(x,S,m,T,g){for(var I=x[S],E=0;E<o.length;E++)if(L(I,o[E]))return null;var A=JSON.stringify(o,function(Y,u){var G=J(u);return G==="symbol"?String(u):u});return new C("Invalid "+T+" `"+g+"` of value `"+String(I)+"` "+("supplied to `"+m+"`, expected one of "+A+"."))}return O(f)}function te(o){function f(x,S,m,T,g){if(typeof o!="function")return new C("Property `"+g+"` of component `"+m+"` has invalid PropType notation inside objectOf.");var I=x[S],E=D(I);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type "+("`"+E+"` supplied to `"+m+"`, expected an object."));for(var A in I)if(n(I,A)){var P=o(I,A,m,T,g+"."+A,r);if(P instanceof Error)return P}return null}return O(f)}function $(o){if(!Array.isArray(o))return process.env.NODE_ENV!=="production"&&a("Invalid argument supplied to oneOfType, expected an instance of array."),l;for(var f=0;f<o.length;f++){var x=o[f];if(typeof x!="function")return a("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+Z(x)+" at index "+f+"."),l}function S(m,T,g,I,E){for(var A=[],P=0;P<o.length;P++){var Y=o[P],u=Y(m,T,g,I,E,r);if(u==null)return null;u.data&&n(u.data,"expectedType")&&A.push(u.data.expectedType)}var G=A.length>0?", expected one of type ["+A.join(", ")+"]":"";return new C("Invalid "+I+" `"+E+"` supplied to "+("`"+g+"`"+G+"."))}return O(S)}function z(){function o(f,x,S,m,T){return V(f[x])?null:new C("Invalid "+m+" `"+T+"` supplied to "+("`"+S+"`, expected a ReactNode."))}return O(o)}function F(o,f,x,S,m){return new C((o||"React class")+": "+f+" type `"+x+"."+S+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+m+"`.")}function U(o){function f(x,S,m,T,g){var I=x[S],E=D(I);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type `"+E+"` "+("supplied to `"+m+"`, expected `object`."));for(var A in o){var P=o[A];if(typeof P!="function")return F(m,T,g,A,J(P));var Y=P(I,A,m,T,g+"."+A,r);if(Y)return Y}return null}return O(f)}function K(o){function f(x,S,m,T,g){var I=x[S],E=D(I);if(E!=="object")return new C("Invalid "+T+" `"+g+"` of type `"+E+"` "+("supplied to `"+m+"`, expected `object`."));var A=t({},x[S],o);for(var P in A){var Y=o[P];if(n(o,P)&&typeof Y!="function")return F(m,T,g,P,J(Y));if(!Y)return new C("Invalid "+T+" `"+g+"` key `"+P+"` supplied to `"+m+"`.\nBad object: "+JSON.stringify(x[S],null,"  ")+`
Valid keys: `+JSON.stringify(Object.keys(o),null,"  "));var u=Y(I,P,m,T,g+"."+P,r);if(u)return u}return null}return O(f)}function V(o){switch(typeof o){case"number":case"string":case"undefined":return!0;case"boolean":return!o;case"object":if(Array.isArray(o))return o.every(V);if(o===null||i(o))return!0;var f=b(o);if(f){var x=f.call(o),S;if(f!==o.entries){for(;!(S=x.next()).done;)if(!V(S.value))return!1}else for(;!(S=x.next()).done;){var m=S.value;if(m&&!V(m[1]))return!1}}else return!1;return!0;default:return!1}}function X(o,f){return o==="symbol"?!0:f?f["@@toStringTag"]==="Symbol"||typeof Symbol=="function"&&f instanceof Symbol:!1}function D(o){var f=typeof o;return Array.isArray(o)?"array":o instanceof RegExp?"object":X(f,o)?"symbol":f}function J(o){if(typeof o=="undefined"||o===null)return""+o;var f=D(o);if(f==="object"){if(o instanceof Date)return"date";if(o instanceof RegExp)return"regexp"}return f}function Z(o){var f=J(o);switch(f){case"array":case"object":return"an "+f;case"boolean":case"date":case"regexp":return"a "+f;default:return f}}function ie(o){return!o.constructor||!o.constructor.name?k:o.constructor.name}return _.checkPropTypes=s,_.resetWarningCache=s.resetWarningCache,_.PropTypes=_,_},ge}var Se,We;function bt(){if(We)return Se;We=1;var e=we();function t(){}function r(){}return r.resetWarningCache=t,Se=function(){function n(l,i,d,p,y,b){if(b!==e){var k=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw k.name="Invariant Violation",k}}n.isRequired=n;function s(){return n}var a={array:n,bigint:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:s,element:n,elementType:n,instanceOf:s,node:n,objectOf:s,oneOf:s,oneOfType:s,shape:s,exact:s,checkPropTypes:r,resetWarningCache:t};return a.PropTypes=a,a},Se}if(process.env.NODE_ENV!=="production"){var ht=Ve(),gt=!0;Ae.exports=vt()(ht.isElement,gt)}else Ae.exports=bt()();function Ue(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),r.push.apply(r,n)}return r}function Q(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?Ue(Object(r),!0).forEach(function(n){re(e,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ue(Object(r)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))})}return e}function de(e){return de=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},de(e)}function re(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function St(e,t){if(e==null)return{};var r={},n=Object.keys(e),s,a;for(a=0;a<n.length;a++)s=n[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function It(e,t){if(e==null)return{};var r=St(e,t),n,s;if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],!(t.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function Oe(e){return xt(e)||Ot(e)||Tt(e)||Et()}function xt(e){if(Array.isArray(e))return Te(e)}function Ot(e){if(typeof Symbol!="undefined"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function Tt(e,t){if(e){if(typeof e=="string")return Te(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Te(e,t)}}function Te(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Et(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Pt(e){var t,r=e.beat,n=e.fade,s=e.beatFade,a=e.bounce,l=e.shake,i=e.flash,d=e.spin,p=e.spinPulse,y=e.spinReverse,b=e.pulse,k=e.fixedWidth,_=e.inverse,L=e.border,C=e.listItem,O=e.flip,N=e.size,B=e.rotation,M=e.pull,q=(t={"fa-beat":r,"fa-fade":n,"fa-beat-fade":s,"fa-bounce":a,"fa-shake":l,"fa-flash":i,"fa-spin":d,"fa-spin-reverse":y,"fa-spin-pulse":p,"fa-pulse":b,"fa-fw":k,"fa-inverse":_,"fa-border":L,"fa-li":C,"fa-flip":O===!0,"fa-flip-horizontal":O==="horizontal"||O==="both","fa-flip-vertical":O==="vertical"||O==="both"},re(t,"fa-".concat(N),typeof N!="undefined"&&N!==null),re(t,"fa-rotate-".concat(B),typeof B!="undefined"&&B!==null&&B!==0),re(t,"fa-pull-".concat(M),typeof M!="undefined"&&M!==null),re(t,"fa-swap-opacity",e.swapOpacity),t);return Object.keys(q).map(function(c){return q[c]?c:null}).filter(function(c){return c})}function wt(e){return e=e-0,e===e}function Je(e){return wt(e)?e:(e=e.replace(/[\-_\s]+(.)?/g,function(t,r){return r?r.toUpperCase():""}),e.substr(0,1).toLowerCase()+e.substr(1))}var _t=["style"];function Ct(e){return e.charAt(0).toUpperCase()+e.slice(1)}function Rt(e){return e.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,r){var n=r.indexOf(":"),s=Je(r.slice(0,n)),a=r.slice(n+1).trim();return s.startsWith("webkit")?t[Ct(s)]=a:t[s]=a,t},{})}function Ge(e,t){var r=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof t=="string")return t;var n=(t.children||[]).map(function(d){return Ge(e,d)}),s=Object.keys(t.attributes||{}).reduce(function(d,p){var y=t.attributes[p];switch(p){case"class":d.attrs.className=y,delete t.attributes.class;break;case"style":d.attrs.style=Rt(y);break;default:p.indexOf("aria-")===0||p.indexOf("data-")===0?d.attrs[p.toLowerCase()]=y:d.attrs[Je(p)]=y}return d},{attrs:{}}),a=r.style,l=a===void 0?{}:a,i=It(r,_t);return s.attrs.style=Q(Q({},s.attrs.style),l),e.apply(void 0,[t.tag,Q(Q({},s.attrs),i)].concat(Oe(n)))}var Ke=!1;try{Ke=process.env.NODE_ENV==="production"}catch(e){}function jt(){if(!Ke&&console&&typeof console.error=="function"){var e;(e=console).error.apply(e,arguments)}}function ze(e){if(e&&de(e)==="object"&&e.prefix&&e.iconName&&e.icon)return e;if(le.parse.icon)return le.parse.icon(e);if(e===null)return null;if(e&&de(e)==="object"&&e.prefix&&e.iconName)return e;if(Array.isArray(e)&&e.length===2)return{prefix:e[0],iconName:e[1]};if(typeof e=="string")return{prefix:"fas",iconName:e}}function Ie(e,t){return Array.isArray(t)&&t.length>0||!Array.isArray(t)&&t?re({},e,t):{}}var ne=w.forwardRef(function(e,t){var r=e.icon,n=e.mask,s=e.symbol,a=e.className,l=e.title,i=e.titleId,d=e.maskId,p=ze(r),y=Ie("classes",[].concat(Oe(Pt(e)),Oe(a.split(" ")))),b=Ie("transform",typeof e.transform=="string"?le.parse.transform(e.transform):e.transform),k=Ie("mask",ze(n)),_=le.icon(p,Q(Q(Q(Q({},y),b),k),{},{symbol:s,title:l,titleId:i,maskId:d}));if(!_)return jt("Could not find icon",p),null;var L=_.abstract,C={ref:t};return Object.keys(e).forEach(function(O){ne.defaultProps.hasOwnProperty(O)||(C[O]=e[O])}),At(L[0],C)});ne.displayName="FontAwesomeIcon";ne.propTypes={beat:v.bool,border:v.bool,beatFade:v.bool,bounce:v.bool,className:v.string,fade:v.bool,flash:v.bool,mask:v.oneOfType([v.object,v.array,v.string]),maskId:v.string,fixedWidth:v.bool,inverse:v.bool,flip:v.oneOf([!0,!1,"horizontal","vertical","both"]),icon:v.oneOfType([v.object,v.array,v.string]),listItem:v.bool,pull:v.oneOf(["right","left"]),pulse:v.bool,rotation:v.oneOf([0,90,180,270]),shake:v.bool,size:v.oneOf(["2xs","xs","sm","lg","xl","2xl","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"]),spin:v.bool,spinPulse:v.bool,spinReverse:v.bool,symbol:v.oneOfType([v.bool,v.string]),title:v.string,titleId:v.string,transform:v.oneOfType([v.string,v.object]),swapOpacity:v.bool};ne.defaultProps={border:!1,className:"",mask:null,maskId:null,fixedWidth:!1,inverse:!1,flip:!1,icon:null,listItem:!1,pull:null,pulse:!1,rotation:null,size:null,spin:!1,spinPulse:!1,spinReverse:!1,beat:!1,fade:!1,beatFade:!1,bounce:!1,shake:!1,symbol:!1,title:"",titleId:null,transform:null,swapOpacity:!1};var At=Ge.bind(null,w.createElement);function kt({iconObject:e,size:t="lg"}){return h.jsx("div",{className:"ultimate-blocks-icon-render",children:h.jsx(ne,{icon:e.getAttributes(),size:t})})}function Ee({targetIcon:e,isEmpty:t=!1,onClick:r}){const n=w.useRef(null),[s,a]=w.useState(!1),l=i=>d=>{d.preventDefault(),d.stopPropagation(),a(i)};return h.jsx("div",{ref:n,className:"ultimate-blocks-icon-card",onMouseEnter:l(!0),onMouseLeave:l(!1),"data-is-empty":t,onClick:i=>{i.preventDefault(),i.stopPropagation(),r(e.getName())},"data-icon":e.getName(),children:!t&&h.jsxs(w.Fragment,{children:[h.jsx(kt,{iconObject:e}),s&&h.jsx(pe.Popover,{anchor:n.current,children:h.jsx("div",{className:"ultimate-blocks-icon-card-popover-wrap",children:e.getName()})})]})})}function Nt({targetViewpoint:e,threshold:t=1,visibleCallback:r=()=>{}}){const n=w.useRef(null);return w.useEffect(()=>{const s={root:e.current,threshold:t},a=new IntersectionObserver(r,s);return a.observe(n.current),()=>{a.disconnect()}},[]),h.jsx("div",{ref:n,className:"ultimate-blocks-intersection-observer",children:"+"})}function qt({iconList:e,onIconSelect:t,onIconClear:r,maxVisibleCards:n=30}){const s=w.useRef(null),[a,l]=w.useState(0),[i,d]=w.useState(0),[p,y]=w.useState(null),[b,k]=w.useState([]),_=()=>{const O=a*n,N=e.slice(0,O);k(N)};w.useEffect(()=>{const O=Math.ceil(e.length/n);d(O),y(xe()),l(1),_()},[e]),w.useEffect(()=>{p!==null&&(l(a+1),_())},[p]);const L=()=>{const O=b.map(N=>h.jsx(Ee,{onClick:t,targetIcon:N},N.getName()));return h.jsxs(w.Fragment,{children:[h.jsx(Ee,{isEmpty:!0,targetIcon:new Pe("set_select_empty_icon",{iconName:"clear selection"}),onClick:r},"clear_selection"),O]})},C=()=>h.jsx("div",{className:"no-icon-listing",children:h.jsx("i",{children:ae.__("no icon found","ultimate-blocks")})});return h.jsxs("div",{ref:s,className:"ultimate-blocks-icon-listing",children:[e.length>0?L():C(),h.jsx(Nt,{targetViewpoint:s,threshold:.5,visibleCallback:()=>{y(xe())}})]})}function Mt({frequentList:e=[],listSize:t=4,onSelect:r}){const[n,s]=w.useState([]);return w.useEffect(()=>{const a=e.slice(0,t),l=t-a.length;for(let i=0;i<l;i++)a.push(null);s(a)},[e]),h.jsx("div",{className:"ultimate-blocks-frequent-icon-listing",children:n.map((a,l)=>h.jsx(Ee,{targetIcon:a||new Pe("empty",{iconName:"empty"}),isEmpty:a===null,onClick:r},l))})}function Lt({id:e,onFilterChange:t,iconList:r,onIconSelect:n,onIconClear:s,currentIconObject:a=null,frequentList:l=[]},i){return h.jsx("div",{id:e,className:"ultimate-blocks-icon-control-wrapper",children:h.jsxs("div",{className:"ultimate-blocks-icon-list-wrap",children:[h.jsx(lt,{onChange:d=>ue.Debouncer(()=>t(d),200,"icon-search-input")}),h.jsx(Mt,{frequentList:l,onSelect:n}),h.jsx(qt,{iconList:r,onIconSelect:n,onIconClear:s})]})})}const $t=w.forwardRef(Lt),Dt=(e,t,r=null)=>{const n=r!==null?r:Math.ceil(Date.now()/1e3);return{name:e,count:t,selectionTime:[n]}};function Ft(e){this.sessionCacheName=e;const{models:t}=wp.api,r=l=>l.map(i=>(i.count===void 0&&(i.count=0),i)),n=()=>{const l=sessionStorage.getItem(this.sessionCacheName);if(l)try{return JSON.parse(l)}catch(i){sessionStorage.setItem(this.sessionCacheName,null)}return null},s=()=>ee(this,null,function*(){const i=yield new t.Settings().fetch();if(i&&i[this.sessionCacheName])try{return JSON.parse(i[this.sessionCacheName])}catch(d){}return[]}),a=l=>{sessionStorage.setItem(this.sessionCacheName,l)};this.getList=()=>ee(this,null,function*(){return new Promise(l=>ee(this,null,function*(){let i=[];const d=n();if(d!==null)i=r(d);else{const p=yield s();p&&(i=r(p),a(JSON.stringify(i)))}l(i)}))}),this.getListAsIconNames=()=>ee(this,null,function*(){return(yield this.getList()).map(({name:i})=>i)}),this.addFrequentIcon=l=>ee(this,null,function*(){const i=n()||[];if(l&&l!==""){const[d]=i.filter(b=>b.name===l);d?d.count=d.count?Number.parseInt(d.count,10)+1:0:i.push(Dt(l,1));const p=JSON.stringify(i);a(p),yield new t.Settings().save({[this.sessionCacheName]:p})}return i})}function Qe({label:e,id:t=null,onIconSelect:r=()=>{},selectedIcon:n=null,frequentSettingName:s="ub_icon_choices"}){const[a,l]=w.useState(t),[i,d]=w.useState([]),[p,y]=w.useState([]),[b,k]=w.useState(""),[_,L]=w.useState(n),[C,O]=w.useState([]),[N,B]=w.useState(null),M=w.useRef(null),q=w.useRef(!0),c=()=>ee(this,null,function*(){let $=N;$||($=new Ft(s),B($));let z=yield $.getList();z=z.sort((U,K)=>{const{count:V}=U,{count:X}=K;return V>X?-1:V<X?1:0});const F=z.map(U=>U.name&&U.name!==""?te(U.name):null).filter(U=>U!==null);O(F)}),H=w.useRef(!0);w.useEffect(()=>{c()},[i]),w.useEffect(()=>{r(_),H.current||N.addFrequentIcon(_).then(()=>{c()}),H.current=!1},[_]),w.useEffect(()=>{a===null&&l(xe());let $;const z=global||self;if(z.ubIcons)$=z.ubIcons;else{const F=ye(ye({},Ye.fas),Be.fab),U=Object.keys(F).filter(D=>Object.prototype.hasOwnProperty.call(F,D)),K=U.map(D=>F[D].iconName);$=Array.from(new Set(K)).map(D=>{let J=null;return U.map(Z=>{try{if(F[Z].iconName===D)throw J=Z,new Error("match found, stop iteration")}catch(ie){}}),J}).map(D=>new Pe(D,F[D])),z.ubIcons=$}d([...$]),y([...$])},[]),w.useEffect(()=>{q.current||oe(b),q.current=!1},[b]);const oe=$=>{let F=$.trim().toLowerCase();F.length<3&&(F="");const U=i.filter(K=>K.getName().includes(F));y(U)},te=$=>{if($){const[z]=i.filter(F=>F.getName()===$);if(z)return z}return null};return h.jsx(h.Fragment,{children:h.jsx($t,{id:a,ref:M,onFilterChange:k,iconList:p,onIconSelect:L,onIconClear:()=>L(null),currentIconObject:te(_),frequentList:C})})}const Xe=e=>Object.keys(e).filter(t=>Object.prototype.hasOwnProperty.call(e,t)).map(t=>e[t]),Wt=Xe(Ye.fas),Ut=Xe(Be.fab),zt=e=>[["fas",Wt],["fab",Ut]].reduce((t,[r,n])=>(n.some(({iconName:s})=>s===e)&&(t=r),t),null);function Yt({iconName:e,size:t,isActive:r=!1}){const n=zt(e),s=()=>!n||!e||e==="",a=()=>({width:`${t}px`,height:`${t}px`});return h.jsx("div",{style:a(),"data-empty":s(),"data-ub-active":r,className:"ultimate-blocks-icon-component",children:!s()&&h.jsx(ne,{className:"ultimate-blocks-icon-component-svg-base",icon:[n,e]})})}const Ze=[ue.IconSizeDefinition(ae.__("Small","ultimate-blocks-pro"),"small",30),ue.IconSizeDefinition(ae.__("Medium","ultimate-blocks-pro"),"medium",50),ue.IconSizeDefinition(ae.__("Large","ultimate-blocks-pro"),"large",70)];function et({size:e,fallbackSize:t=30,iconSizeDefinitions:r=Ze,sizeChangeCallback:n}){return h.jsx(pe.FontSizePicker,{fontSizes:r,value:e,fallbackFontSize:t,onChange:n,__nextHasNoMarginBottom:!0})}function Bt({iconName:e,size:t,panelLabel:r,iconControlLabel:n,iconSizeDefinitions:s=Ze,iconSelectCallback:a,sizeChangeCallback:l,fallbackSize:i=30}){return h.jsx(ot.InspectorControls,{children:h.jsxs(pe.PanelBody,{title:r,children:[h.jsx(Qe,{selectedIcon:e,label:n,onIconSelect:a}),h.jsx(et,{sizeChangeCallback:l,size:t,fallbackSize:i,iconSizeDefinitions:s})]})})}function Vt({targetQuery:e,children:t}){const r=document.querySelector(e);return r?at.createPortal(t,r):null}function Ht({children:e}){return h.jsx("div",{className:"block-editor-block-styles__variants",children:e})}function Jt({isActive:e,onClick:t,children:r}){return h.jsx(pe.Button,{className:`block-editor-block-styles__item ${e?"is-active":""}`,variant:"secondary",isActiveStyle:!0,onClick:t,children:h.jsx("span",{className:"block-editor-block-styles__item-text",children:r})})}function Gt({children:e}){return h.jsx("div",{className:"ub-overlay",children:e})}exports.BlackWhiteButton=Jt;exports.BlackWhiteButtonGroup=Ht;exports.IconControl=Qe;exports.IconPanelGroup=Bt;exports.IconSizePicker=et;exports.Overlay=Gt;exports.PortalBase=Vt;exports.UbIconComponent=Yt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
